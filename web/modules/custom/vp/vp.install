<?php

/**
 * @file
 * Install, update and uninstall functions for the VP module.
 */

use Drupal\Core\Database\Database;
use Drupal\vp\Entity\VirtualPatient;
use Drupal\vp\Entity\VirtualPatientNode;

/**
 * Implements hook_install().
 */
function vp_install() {
  \Drupal::messenger()->addStatus(__FUNCTION__);
}

/**
 * Implements hook_uninstall().
 */
function vp_uninstall() {
  \Drupal::messenger()->addStatus(__FUNCTION__);
}

/**
 * Implements hook_requirements().
 */
function vp_requirements($phase) {
  $requirements = [];

  if ($phase == 'runtime') {
    $value = mt_rand(0, 100);
    $requirements['vp_status'] = [
      'title' => t('VP status'),
      'value' => t('VP value: @value', ['@value' => $value]),
      'severity' => $value > 50 ? REQUIREMENT_INFO : REQUIREMENT_WARNING,
    ];
  }

  return $requirements;
}

/**
 * Update default language to 'en' for all virtual_patient entities.
 */
function vp_update_100013() {

  $entities = \Drupal::entityTypeManager()
    ->getStorage('virtual_patient')
    ->loadMultiple();
  foreach ($entities as $entity) {
    if ($entity->get('langcode')->value !== 'en') {
      $entity->set('langcode', 'en');
      $entity->save();
    }
  }

  $entities = \Drupal::entityTypeManager()
    ->getStorage('vp_node')
    ->loadMultiple();

  foreach ($entities as $entity) {
    if ($entity->get('langcode')->value !== 'en') {
      $entity->set('langcode', 'en');
      $entity->save();
    }
  }
}

/**
 * Re-associate all vp_node entities with their corresponding virtual_patient entities.
 */
function vp_update_100016(&$sandbox) {
  // Initialize the sandbox for batch processing if not set.
  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    $sandbox['current'] = 0;
    $sandbox['max'] = \Drupal::entityQuery('virtual_patient')->accessCheck(FALSE)->count()->execute();
    $sandbox['vp_nodes'] = [];
    $sandbox['vp_by_uid'] = [];

    // Load all vp_node entities and group by uid.
    $vp_node_ids = \Drupal::entityQuery('vp_node')
      ->accessCheck(FALSE)
      ->execute();
    $vp_nodes = VirtualPatientNode::loadMultiple($vp_node_ids);
    foreach ($vp_nodes as $vp_node) {
      $uid = $vp_node->get('uid')->target_id;
      $sandbox['vp_nodes'][$uid][] = $vp_node->id();
    }

    // Load all virtual_patient entities and group by uid.
    $vp_ids = \Drupal::entityQuery('virtual_patient')
      ->accessCheck(FALSE)
      ->execute();
    $virtual_patients = VirtualPatient::loadMultiple($vp_ids);
    foreach ($virtual_patients as $vp) {
      $uid = $vp->get('uid')->target_id;
      // Store the first virtual_patient found for each uid.
      if (!isset($sandbox['vp_by_uid'][$uid])) {
        $sandbox['vp_by_uid'][$uid] = $vp->id();
      }
    }
  }

  // Process virtual_patient entities in batches.
  $batch_size = 10;
  $vp_ids = array_slice(
    \Drupal::entityQuery('virtual_patient')
      ->accessCheck(FALSE)
      ->range($sandbox['current'], $batch_size)
      ->execute(),
    0,
    $batch_size
  );

  foreach (VirtualPatient::loadMultiple($vp_ids) as $virtual_patient) {
    $uid = $virtual_patient->get('uid')->target_id;

    // Get vp_node IDs for this user.
    $vp_node_ids = !empty($sandbox['vp_nodes'][$uid]) ? $sandbox['vp_nodes'][$uid] : [];

    if (!empty($vp_node_ids)) {
      // Prepare the field_vp_nodes values.
      $field_values = [];
      foreach ($vp_node_ids as $vp_node_id) {
        $field_values[] = ['target_id' => $vp_node_id];
      }

      // Update the field_vp_nodes field.
      $virtual_patient->set('field_vp_nodes', $field_values);
      $virtual_patient->save();
    }

    $sandbox['progress']++;
    $sandbox['current']++;
  }

  // Update the sandbox status.
  $sandbox['#finished'] = empty($vp_ids) ? 1 : ($sandbox['progress'] / $sandbox['max']);
}


/**
 * Re-associate vp_node entities with virtual_patient entities based on field_parent.
 */
function vp_update_100021() {
  // Load all virtual_patient entities.
  $vp_ids = \Drupal::entityQuery('virtual_patient')
    ->accessCheck(FALSE)
    ->execute();
  $virtual_patients = VirtualPatient::loadMultiple($vp_ids);

  foreach ($virtual_patients as $virtual_patient) {
    $vp_id = $virtual_patient->id();

    // Query vp_node entities where field_parent matches the virtual_patient ID.
    $vp_node_ids = \Drupal::entityQuery('vp_node')
      ->condition('field_parent', $vp_id)
      ->accessCheck(FALSE)
      ->execute();

    // Prepare the field_vp_nodes values, overwriting existing values.
    $field_values = [];
    foreach ($vp_node_ids as $vp_node_id) {
      $field_values[] = ['target_id' => $vp_node_id];
    }

    // Update the field_vp_nodes field.
    $virtual_patient->set('field_vp_nodes', $field_values);
    $virtual_patient->save();
  }
}

<?php

/**
 * @file
 * Primary module hooks for audit module.
 */

use Drupal\Core\Render\Element;
use Drupal\Core\Render\Markup;
use Drupal\user\UserInterface;

/**
 * Implements hook_theme().
 */
function audit_theme(): array {
  return [
    'audit_question' => ['render element' => 'elements'],
    'audit_evidence' => ['render element' => 'elements'],
  ];
}

/**
 * Prepares variables for audit question templates.
 *
 * Default template: audit-question.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the audit question information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_audit_question(array &$variables): void {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }

  // Get the audit question entity.
  $audit_question = $variables['elements']['#audit_question'];

  // Pass the question text.
  if (!empty($audit_question->label())) {
    $variables['question'] = $audit_question->label();
  }

  // Pass the help text if available.
  if (isset($audit_question->field_help->value)) {
    $variables['help_text'] = $audit_question->field_help->value;
  }
}

/**
 * Implements hook_user_cancel().
 */
function audit_user_cancel($edit, UserInterface $account, $method): void {
  switch ($method) {
    case 'user_cancel_block_unpublish':
      // Unpublish audit questions.
      $storage = \Drupal::entityTypeManager()->getStorage('audit_question');
      $audit_question_ids = $storage->getQuery()
        ->condition('uid', $account->id())
        ->condition('status', 1)
        ->accessCheck(FALSE)
        ->execute();
      foreach ($storage->loadMultiple($audit_question_ids) as $audit_question) {
        $audit_question->set('status', FALSE)->save();
      }
      break;

    case 'user_cancel_reassign':
      // Anonymize audit questions.
      $storage = \Drupal::entityTypeManager()->getStorage('audit_question');
      $audit_question_ids = $storage->getQuery()
        ->condition('uid', $account->id())
        ->accessCheck(FALSE)
        ->execute();
      foreach ($storage->loadMultiple($audit_question_ids) as $audit_question) {
        $audit_question->setOwnerId(1)->save();
      }
      break;
  }
}

/**
 * Implements hook_ENTITY_TYPE_predelete() for user entities.
 */
function audit_user_predelete(UserInterface $account): void {
  // Delete audit questions that belong to this account.
  $storage = \Drupal::entityTypeManager()->getStorage('audit_question');
  $audit_question_ids = $storage->getQuery()
    ->condition('uid', $account->id())
    ->accessCheck(FALSE)
    ->execute();
  $storage->delete(
    $storage->loadMultiple($audit_question_ids)
  );

  $storage = \Drupal::entityTypeManager()->getStorage('audit_evidence');
  $audit_evidence_ids = $storage->getQuery()
    ->condition('uid', $account->id())
    ->accessCheck(FALSE)
    ->execute();
  $storage->delete(
    $storage->loadMultiple($audit_evidence_ids)
  );
}

function audit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id): void {
  // @todo
}

/**
 * Prepares variables for audit evidence templates.
 *
 * Default template: audit-evidence.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the audit evidence information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_audit_evidence(array &$variables): void {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Implements hook_node_view().
 *
 * Alter the view of audit nodes.
 */
function audit_node_view(array &$build, \Drupal\node\NodeInterface $node, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode): void {
  if ($node->getType() === 'audit') {
    // Attach our custom library
    $build['#attached']['library'][] = 'audit/audit-node-view';

    // Load the terms of the vocabulary vet_21001_clusters.
    $terms = \Drupal::entityTypeManager()
      ->getStorage('taxonomy_term')
      ->loadByProperties(['vid' => 'vet_21001_clusters']);

    // Sort terms by weight.
    uasort($terms, function ($a, $b) {
      return (int) $a->weight->value > (int) $b->weight->value ? 1 : -1;
    });

    // Create a details element for each term.
    foreach ($terms as $term) {
      /** @var \Drupal\taxonomy\Entity\Term $term */
      $build['cluster_' . $term->id()] = [
        '#type' => 'details',
        '#title' => $term->label(),
        '#description' => $term->description->value,
        '#open' => TRUE,
        '#weight' => $term->weight->value,
        '#attributes' => [
          'class' => ['audit-cluster-details'],
          'id' => 'cluster-' . $term->id(),
        ],
      ];

      // Load audit questions that belong to this cluster.
      $questions = \Drupal::entityTypeManager()
        ->getStorage('audit_question')
        ->loadByProperties(['field_cluster' => $term->id()]);

      if (empty($questions)) {
        $build['cluster_' . $term->id()]['question'] = [
          '#type' => "markup",
          '#markup' => Markup::create(t('<div class="audit-no-questions"><i class="bi bi-ban"></i> Currently, there are not questions for this cluster.</div>')),
          '#attributes' => [
            'class' => ['audit-no-questions'],
          ],
        ];
      }

      uasort($questions, function ($a, $b) {
        return (int) $a->field_weight->value > (int) $b->field_weight->value ? 1 : -1;
      });

      // Add each question to the cluster details element.
      foreach ($questions as $question) {
        /** @var \Drupal\audit\Entity\AuditQuestion $question */
        $view_builder = \Drupal::entityTypeManager()->getViewBuilder('audit_question');
        $question_build = $view_builder->view($question, 'audit');
        // Pass the entity to the template
        $question_build['#audit_question'] = $question;
        $build['cluster_' . $term->id()]['question_' . $question->id()] = $question_build;
      }
    }
  }
}

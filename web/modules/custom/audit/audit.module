<?php

/**
 * @file
 * Primary module hooks for audit module.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\node\NodeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Render\Markup;
use Drupal\user\UserInterface;

/**
 * Implements hook_theme().
 */
function audit_theme(): array {
  return [
    'audit_question' => ['render element' => 'elements'],
    'audit_evidence' => ['render element' => 'elements'],
  ];
}

/**
 * Prepares variables for audit question templates.
 *
 * Default template: audit-question.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the audit question information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_audit_question(array &$variables): void {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }

  // Get the audit question entity.
  $audit_question = $variables['elements']['#audit_question'];

  // Pass the question text.
  if (!empty($audit_question->label())) {
    $variables['question'] = $audit_question->label();
  }

  // Pass the help text if available.
  if (isset($audit_question->field_help->value)) {
    $variables['help_text'] = $audit_question->field_help->value;
  }

  // Pass the audit entity and audit question entity if available.
  if (isset($variables['elements']['#audit_entity'])) {
    $variables['audit_entity'] = $variables['elements']['#audit_entity'];

    // Load existing evidences for this audit and question with a single optimized query.
    if (isset($variables['elements']['#audit_question_entity'])) {
      $audit_question_entity = $variables['elements']['#audit_question_entity'];

      $evidence_storage = \Drupal::entityTypeManager()->getStorage('audit_evidence');
      $query = $evidence_storage->getQuery()
        ->condition('field_audit', $variables['audit_entity']->id())
        ->condition('field_audit_question', $audit_question_entity->id())
        ->sort('created', 'DESC')
        ->accessCheck(TRUE);

      $evidence_ids = $query->execute();
      $variables['evidences'] = $evidence_storage->loadMultiple($evidence_ids);
    }
  }

  if (isset($variables['elements']['#audit_question_entity'])) {
    $variables['audit_question_entity'] = $variables['elements']['#audit_question_entity'];
  }
  
  // Pass the hierarchy level if available
  if (isset($variables['elements']['#question_hierarchy_level'])) {
    $variables['question_hierarchy_level'] = $variables['elements']['#question_hierarchy_level'];
  } else {
    $variables['question_hierarchy_level'] = 0;
  }
  
  // Pass children if available
  if (isset($variables['elements']['#question_children_from_tree'])) {
    $variables['question_children'] = $variables['elements']['#question_children_from_tree'];
  } else {
    $variables['question_children'] = [];
  }
}

/**
 * Implements hook_user_cancel().
 */
function audit_user_cancel($edit, UserInterface $account, $method): void {
  switch ($method) {
    case 'user_cancel_block_unpublish':
      // Unpublish audit questions.
      $storage = \Drupal::entityTypeManager()->getStorage('audit_question');
      $audit_question_ids = $storage->getQuery()
        ->condition('uid', $account->id())
        ->condition('status', 1)
        ->accessCheck(FALSE)
        ->execute();
      foreach ($storage->loadMultiple($audit_question_ids) as $audit_question) {
        $audit_question->set('status', FALSE)->save();
      }
      break;

    case 'user_cancel_reassign':
      // Anonymize audit questions.
      $storage = \Drupal::entityTypeManager()->getStorage('audit_question');
      $audit_question_ids = $storage->getQuery()
        ->condition('uid', $account->id())
        ->accessCheck(FALSE)
        ->execute();
      foreach ($storage->loadMultiple($audit_question_ids) as $audit_question) {
        $audit_question->setOwnerId(1)->save();
      }
      break;
  }
}

/**
 * Implements hook_ENTITY_TYPE_predelete() for user entities.
 */
function audit_user_predelete(UserInterface $account): void {
  // Delete audit questions that belong to this account.
  $storage = \Drupal::entityTypeManager()->getStorage('audit_question');
  $audit_question_ids = $storage->getQuery()
    ->condition('uid', $account->id())
    ->accessCheck(FALSE)
    ->execute();
  $storage->delete(
    $storage->loadMultiple($audit_question_ids)
  );

  $storage = \Drupal::entityTypeManager()->getStorage('audit_evidence');
  $audit_evidence_ids = $storage->getQuery()
    ->condition('uid', $account->id())
    ->accessCheck(FALSE)
    ->execute();
  $storage->delete(
    $storage->loadMultiple($audit_evidence_ids)
  );
}

/**
 *
 */
function audit_form_alter(&$form, FormStateInterface $form_state, $form_id): void {
  // @todo
  if ($form_id == 'user_register_form') {
    $characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    $length = rand(8, 12); // Random length between 8 and 12
    $username = '';

    for ($i = 0; $i < $length; $i++) {
      $username .= $characters[rand(0, strlen($characters) - 1)];
    }
    $form['account']['name']['#default_value'] = $username;
    $form['account']['name']['#access'] = FALSE;

    // Add custom submit handler to redirect after registration
    $form['#submit'][] = 'audit_user_register_form_submit';
  }
}

/**
 * Custom submit handler for user registration form.
 */
function audit_user_register_form_submit(&$form, FormStateInterface $form_state) {
  // Redirect to registration success page after successful registration
  dd(__METHOD__);
  $form_state->setRedirect('audit.registration_success');
}


/**
 * Prepares variables for audit evidence templates.
 *
 * Default template: audit-evidence.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the audit evidence information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_audit_evidence(array &$variables): void {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Implements hook_node_view().
 *
 * Alter the view of audit nodes.
 */
function audit_node_view(array &$build, NodeInterface $node, EntityViewDisplayInterface $display, $view_mode): void {
  if ($node->getType() === 'audit') {
    // Attach our custom library.
    $build['#attached']['library'][] = 'audit/audit-node-view';

    // Load the terms of the vocabulary vet_21001_clusters.
    $terms = \Drupal::entityTypeManager()
      ->getStorage('taxonomy_term')
      ->loadByProperties(['vid' => 'vet_21001_clusters']);

    // Sort terms by weight.
    uasort($terms, function ($a, $b) {
      return (int) $a->weight->value > (int) $b->weight->value ? 1 : -1;
    });

    // Create a details element for each term.
    foreach ($terms as $term) {
      /** @var \Drupal\taxonomy\Entity\Term $term */
      $build['cluster_' . $term->id()] = [
        '#type' => 'details',
        '#title' => $term->label(),
        '#description' => $term->description->value,
        '#open' => TRUE,
        '#weight' => $term->weight->value,
        '#attributes' => [
          'class' => ['audit-cluster-details'],
          'id' => 'cluster-' . $term->id(),
        ],
      ];

      // Load audit questions that belong to this cluster.
      $questions = \Drupal::entityTypeManager()
        ->getStorage('audit_question')
        ->loadByProperties(['field_cluster' => $term->id()]);

      if (empty($questions)) {
        $build['cluster_' . $term->id()]['question'] = [
          '#type' => "markup",
          '#markup' => Markup::create(t('<div class="audit-no-questions"><i class="bi bi-ban"></i> Currently, there are not questions for this cluster.</div>')),
          '#attributes' => [
            'class' => ['audit-no-questions'],
          ],
        ];
      }

      // Build parent-child relationships: find which questions are children of others
      $parent_map = [];
      foreach ($questions as $question) {
        $children = $question->field_children->referencedEntities();
        foreach ($children as $child) {
          $parent_map[$child->id()] = $question->id();
        }
      }

      // Create a tree structure for questions
      $tree = [];
      
      // Build the tree structure - top-level questions (not children of others)
      foreach ($questions as $question) {
        $question_id = $question->id();
        if (!isset($parent_map[$question_id])) {
          // This is a top-level question (not a child of another question in this cluster)
          $tree[$question_id] = [
            'question' => $question,
            'children' => [],
          ];
        }
      }

      // Add children to their parents
      foreach ($questions as $question) {
        $question_id = $question->id();
        if (isset($parent_map[$question_id])) {
          // This is a child question
          $parent_id = $parent_map[$question_id];
          foreach ($tree as $top_parent_id => $tree_item) {
            // Find the correct parent in the tree (could be nested)
            $add_child_to_tree = function($item, $target_parent_id, $child_data) use (&$add_child_to_tree, &$tree, $top_parent_id) {
              if ($item['question']->id() == $target_parent_id) {
                $tree[$top_parent_id]['children'][$child_data['question']->id()] = $child_data;
                return true;
              }
              
              // Check recursively in children
              foreach ($item['children'] as $child_id => $child_item) {
                if ($add_child_to_tree($child_item, $target_parent_id, $child_data)) {
                  return true;
                }
              }
              return false;
            };
            
            if ($add_child_to_tree($tree_item, $parent_id, [
              'question' => $question,
              'children' => []
            ])) {
              break; // Found and added
            }
          }
        }
      }

      // Process questions in hierarchical order
      $process_questions_tree = function($tree_items, $current_level = 0) use (&$process_questions_tree, $node, $term, &$build) {
        // Sort questions by weight at each level
        $sorted_items = $tree_items;
        uasort($sorted_items, function ($a, $b) {
          return (int) $a['question']->field_weight->value > (int) $b['question']->field_weight->value ? 1 : -1;
        });
        
        foreach ($sorted_items as $question_id => $item) {
          /** @var \Drupal\audit\Entity\AuditQuestion $question */
          $question = $item['question'];
          $view_builder = \Drupal::entityTypeManager()->getViewBuilder('audit_question');
          $question_build = $view_builder->view($question, 'audit');
          // Pass the entities to the template.
          $question_build['#audit_question'] = $question;
          $question_build['#audit_question_entity_children'] = $question->field_children->referencedEntities();
          $question_build['#audit_entity'] = $node;
          $question_build['#audit_question_entity'] = $question;
          $question_build['#question_hierarchy_level'] = $current_level;
          
          // Add question to the cluster
          $build['cluster_' . $term->id()]['question_' . $question->id()] = $question_build;
          
          // Process children recursively under the same parent key structure
          if (!empty($item['children'])) {
            $process_questions_tree($item['children'], $current_level + 1);
          }
        }
      };
      
      // Sort top-level questions by weight
      uasort($tree, function ($a, $b) {
        return (int) $a['question']->field_weight->value > (int) $b['question']->field_weight->value ? 1 : -1;
      });

      // Process the render array in hierarchical order
      $process_questions_tree($tree);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for page templates.
 */
function audit_preprocess_page(&$variables) {
  // Add the top menu block to all pages for authenticated users.
  $block_manager = \Drupal::service('plugin.manager.block');
  $config = [];
  $plugin_block = $block_manager->createInstance('audit_top_menu_block', $config);
  $access_result = $plugin_block->access(\Drupal::currentUser());

  // Check if access result is allowed
  if ((is_object($access_result) && method_exists($access_result, 'isAllowed') && $access_result->isAllowed()) ||
    (is_bool($access_result) && $access_result)
  ) {
    $render_array = $plugin_block->build();
    if (!empty($render_array)) {
      $variables['page']['audit_top_menu'] = $render_array;
      // Ensure the menu appears at the top
      $variables['page']['audit_top_menu']['#weight'] = -100;
    }
  }

  // Add the footer block to all pages for authenticated users.
  $footer_block = $block_manager->createInstance('audit_footer_block', $config);
  $footer_access_result = $footer_block->access(\Drupal::currentUser());

  // Check if access result is allowed
  if ((is_object($footer_access_result) && method_exists($footer_access_result, 'isAllowed') && $footer_access_result->isAllowed()) ||
    (is_bool($footer_access_result) && $footer_access_result)
  ) {
    $footer_render_array = $footer_block->build();
    if (!empty($footer_render_array)) {
      $variables['page']['audit_footer'] = $footer_render_array;
      // Ensure the footer appears at the bottom
      $variables['page']['audit_footer']['#weight'] = 100;
    }
  }
}
